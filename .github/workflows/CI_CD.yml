name: Combined CI / Release

on:
  push:
    tags:
      - '*'
    branches:
      - '**'

env:
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}

jobs:
  ci_cd:
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for 5 minutes and thereby "wait" for the Playwright workflow
        if: ${{ contains(github.ref, 'renovate/playwright') }}
        run: sleep 5m
        shell: bash
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Write release version
        if: ${{ env.IS_RELEASE == 'true' }}
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Restore dependencies
        run: dotnet restore ScreenshotCreator.sln
      - name: Begin Sonar scan
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:mu88_ScreenshotCreator /o:mu88 /d:sonar.token=${{ secrets.SONAR_TOKEN }} /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.opencover.reportsPaths=tests/Tests/coverage.opencover.xml
      - name: Build
        run: dotnet build --no-restore ScreenshotCreator.sln
      - name: Test and collect coverage
        run: dotnet test --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover '/p:ExcludeByFile=\"**/Log.Prefix.cs\"'
      - name: End Sonar scan
        run: dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: ${{ env.IS_RELEASE == 'true' }}
        with:
          registry: registry.hub.docker.com
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker
        if: ${{ env.IS_RELEASE != 'true' }}
        run: |
          dotnet publish src/ScreenshotCreator.Api/ScreenshotCreator.Api.csproj --os linux --arch arm64 /t:PublishContainer '-p:ContainerImageTags="${{ env.VERSION }};latest"'
      - name: Push Docker
        if: ${{ env.IS_RELEASE == 'true' }}
        run: |
          dotnet publish src/ScreenshotCreator.Api/ScreenshotCreator.Api.csproj --os linux --arch arm64 /t:PublishContainer '-p:ContainerImageTags="${{ env.VERSION }};latest"' -p:ContainerRegistry=registry.hub.docker.com